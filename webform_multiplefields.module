<?php

/**
 * Implements hook_form_alter().
 */
function webform_multiplefields_form_alter(&$form, &$form_state, $form_id) {
  // Page admin component
  if($form_id == "webform_component_edit_form"){
    formSetComponentsSettings($form);
  }
  // Page form
  if(isSet($form['#node']->nid) && ("webform_client_form_{$form['#node']->nid}" == $form_id)){
    setComponentsMultiples($form['#node']->nid, $form['#node']->webform['components'], $form);
    $form['#validate'][0] = 'webformMultiplefieldsClientFormValidate';
    $form['#validate'][1] = '_webform_client_form_validate';
  }

}


/**
 * Implements hook_webform_component_insert().
 */
function webform_multiplefields_webform_component_insert($component) {
  saveSettingsComponent($component);
}

/**
 * Implements hook_webform_component_presave().
 */
function webform_multiplefields_webform_component_presave(&$component) {
  saveSettingsComponent($component);
}

/**
 * Implements hook_webform_component_delete().
 */
function webform_multiplefields_webform_component_delete($component) {
  deleteSettingsComponent($component);
}

/**
 * Set settings to field
 */
function formSetComponentsSettings(&$form) {
  $settings_component = loadSettingsComponent($form['nid']['#value'], $form['cid']['#value']);
  $form['webform_multiplefields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field Value Settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['webform_multiplefields']['cardinality'] = array(
    '#type' => 'select',
    '#title' => t('Number of values'),
    '#default_value' => (isSet($settings_component->cardinality)? $settings_component->cardinality : 1 ),
    '#options' => getOptionsCardinality(),
  );
}

/**
 * Get settings of component, by the nid, cid and type. If not been set in db, return settings default.
 */
function loadSettingsComponent($nid, $cid) {
  $component_settings = db_select('webform_multiplefields', 'wm')
    ->fields('wm')
    ->condition('nid', $nid)
    ->condition('cid', $cid)
    ->execute()
    ->fetchObject();
  return $component_settings;
}

/**
 * Create settings the field multiple.
 */
function createSettingsComponent($component) {
  $component['cid'] = !empty($component['cid'])? $component['cid'] : getNextIdComponent($component['nid']);
  $wmid = db_insert('webform_multiplefields')->fields(array(
    'nid' => $component['nid'],
    'cid' => $component['cid'],
    'cardinality' => $component['webform_multiplefields']['cardinality'],
    'form_key' => $component['form_key'],
  ))->execute();
  return $wmid;
}

/**
 * Save or update settings of component.
 */
function saveSettingsComponent($component) {
  if(!isSet($component['webform_multiplefields']['cardinality'])){
    return false;
  }
  $component_exists = loadSettingsComponent($component['nid'], $component['cid']);
  if(empty($component_exists)){
    createSettingsComponent($component);
  } else {
    updateSettingsComponent($component);
  }
  return false;
}

/**
 * Update settings the field multiple.
 */
function updateSettingsComponent($component) {
  $wmid = db_update('webform_multiplefields')->fields(array(
    'nid' => $component['nid'],
    'cid' => $component['cid'],
    'cardinality' => $component['webform_multiplefields']['cardinality'],
    'form_key' => $component['form_key'],
  ))->condition('nid', $component['nid'], '=')->condition('cid', $component['cid'], '=')->execute();
  return $wmid;

}

/**
 * Delete settings the field multiple.
 */
function deleteSettingsComponent($component) {
  db_delete('webform_multiplefields')
  ->condition('nid', $component['nid'])
  ->condition('cid', $component['cid'])
  ->execute();
}


function setTitleElements(&$elements){
  if(!isSet($elements['submitted'])){
    return $elements;
  }

  foreach($elements['submitted'] as $key => $component){
    if(!isSet($component[0]) || !is_array($component[0])){
      continue;
    }

    foreach($component as $key_index => $item){
      if(!isset($item['#webform_component'])){
        continue;
      }
      $elements['submitted'][$key][$key_index]['#title'] = $item['#webform_component']['name'];
    }
  }
  return $elements;
}

function buttonAddMore(&$form, $cpSettings){
  $form['button_add_more'] = array(
    '#type' => 'button',
    '#value' => t("Add More"),
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'action' => 'click',
      'callback' => "buttonAddMoreJSField",
      'wrapper' => "edit-submitted-fieldset-{$cpSettings->form_key}",
      'method' => 'replace',
      'effect' => 'fade',
      'name' => $cpSettings->form_key,
    ),
    '#prefix' => "<div id=\"warpper-ajax-{$cpSettings->form_key}\">",
    '#suffix' => "</div>",
    '#attributes' => array('data-nid' => $cpSettings->nid, 'data-cid' => $cpSettings->cid),
  );
}

function buttonAddMoreJSField($form, $form_state){
  $name = $form_state['clicked_button']['#ajax']['name'];
  $components = $form['submitted']["fieldset_{$name}"][$name];
  foreach($components as $key => $component){
    if(!isSet($component['#webform_component'])){
      unset($components[$key]);
    }
  }

  $modelo = $components[0];
  unset($modelo['#title']);
  $form['submitted']["fieldset_{$name}"][$name][5] = $modelo;
  print drupal_render($form['submitted']["fieldset_{$name}"][$name]); die;
  return $form['submitted']["fieldset_{$name}"];
}

function addFieldsetToComponentsMultiples(&$form, $cpSettings){
  if($cpSettings->cardinality == 1){
    return FALSE;
  }
  $weight = $form[$cpSettings->form_key][0]['#weight'];
  $fieldset["fieldset_{$cpSettings->form_key}"] = array(
    '#type' => 'fieldset',
    '#weight' => $weight,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $fieldset["fieldset_{$cpSettings->form_key}"][$cpSettings->form_key] = $form[$cpSettings->form_key];

  if($cpSettings->cardinality < 0){
    buttonAddMore($fieldset, $cpSettings);
  }

  $form = array_merge($fieldset, $form);
  unset($form[$cpSettings->form_key]);
  return TRUE;
}


/**
 * Return options of cardinality.
 */
function getOptionsCardinality($start = 1, $end = 10){
  $range = drupal_map_assoc(range($start, $end));
  return array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + $range;
}

/**
 * Return id of the next component.
 */
function getNextIdComponent($nid){
  $next_id_query = db_select('webform_component')->condition('nid', $nid);
  $next_id_query->addExpression('MAX(cid) + 1', 'cid');
  return $next_id_query->execute()->fetchField();
}

function setComponentsMultiples($nid, $components, &$form){
  $new_form = array();
  foreach($components as $component){
    $cpSettings = loadSettingsComponent($nid, $component['cid']);
    if(is_numeric($cpSettings->form_key)){
      continue;
    }
    $new_form = array_merge($form['submitted'], setMultipleComponentRecursive($form['submitted'], $cpSettings->form_key, $cpSettings));
  }
  return $new_form;
}

/**
 * Ainda vou melhorar essa poha
 */
function setMultipleComponentRecursive(&$form, $key, $cpSettings){
  if (!is_array($form[$key])) {
    return $form;
  }

  dupliqueFieldByCardinality($form[$key], $cpSettings);
  if(addFieldsetToComponentsMultiples($form, $cpSettings)){
    return $form;
  }

  foreach ($form as &$subarray){
    setMultipleComponentRecursive($subarray, $key, $component_settings);
  }

  return $form;
}


function getDefaultValueByNidCidSidNo($settings){
  $component_value = db_select('webform_submitted_data', 'wsd')
    ->fields('wsd', array('data'))
    ->condition('nid', $settings['nid'])
    ->condition('cid', $settings['cid'])
    ->condition('sid', $settings['sid'])
    ->condition('no', $settings['no'])
    ->execute()
    ->fetchField();
  return $component_value;
}


function setDefaultValueComponent(&$component, $settings){
  $settings_value = array(
    'nid' => $settings['nid'],
    'cid' => $settings['cid'],
    'sid' => $settings['sid'],
    'no' => $settings['no'],
  );
  $component['#default_value'] = getDefaultValueByNidCidSidNo($settings_value);
  return $component;
}


/**
 * Verify if page admin submission.
 */
function isPageSubmission(){
  $args = arg();
  if( (isSet($args[2]) && ($args[2] == "submission")) && (isSet($args[4]) && ($args[4] == "edit")) ){
    return TRUE;
  }
  return FALSE;
}

/**
 * Verify if page admin submission.
 */
function adminSubmissionGetSid(){
  $args = arg();
  if(!isSet($args[3])){
    return FALSE;
  }
  return $args[3];
}

function webformMultiplefieldsClientFormValidate($elements, &$form_state, $first_run = TRUE) {
  $elements['complete form']['submitted'] = setTitleElements($form_state['complete form']);
}

/**
 * Unset title if <> 0
 */
function unsetTitleComponent(&$form, $index){
  if($index == 0){
    return FALSE;
  }
  unset($form['#title']);
}

/**
 * Set $form[$key]['#weight'] = $index;
 */
function setWeightByIndex(&$form, $index){
  if(empty($index)){
    return FALSE;
  }
  $form['#weight'] = $index;
}

function dupliqueFieldByCardinality(&$form, $cpSettings, $cpUnlimited = FALSE){
  $cpMultiples = array();
  $cardinality = $cpSettings->cardinality;

  if($cardinality == -1){
    $cardinality = 1;
  }

  for($index = 0; $index < $cardinality; $index++){
    if( isPageSubmission() ) {
      $cpDefautValueSettings = array(
        'nid' => $cpSettings->nid,
        'cid' => $cpSettings->cid,
        'sid' => adminSubmissionGetSid(),
        'no' => $index,
      );
      setDefaultValueComponent($form, $cpDefautValueSettings);
    }
    setWeightByIndex($form, $index);
    unsetTitleComponent($form, $index);
    $cpMultiples[]  = $form;
  }

  $form = $cpMultiples;


  return $form;
}

function countIndexByName(&$form, $key = NULL){

  if(isSet($form[$key]) && is_array($form[$key]) && isSet($form[$key]['button_add_more'])){
    unset($form[$key]['button_add_more']);
    return count($form[$key]);
  }

  foreach($form as $key => &$subarray){
    countIndexByName($subarray, $key);
  }

  return $form;
}